###############################################################################
# Well-formedness condition (WFC) configuration file                          #
#                                                                             #
#                                                                             #
# IMPORTANT NOTE ON WFCs                                                      #
# The WFCs in this file are contraints which penalize particular results of   #
# the general algorithm.                                                      #
#                                                                             #
# Segmental WFCs are used by the transcriber and Syllable WFCs by the         #
# syllabizer.                                                                 #
#                                                                             #
# Like OT constraints they are (i) ranked and (ii) violable.                  #
# The RANKING is determined by the listing in seg_rank and syll_rank.         #
#                                                                             # 
# When syllabifying, note that calculations based on the sonority             # 
# coefficients are always ranked BELOW the WFCs. So tweaking the weights of   #
# onset/nucleus/coda coefficient will do nothing if the desired               # 
# syllabification is ruled out by a WFC.                                      #
###############################################################################
#
# HOW TO WRITE RULES
# ------------------
# A 'rule' is a Python expression in which the elements in CAPITALS are
# replaced by Python objects before it is evaluated. It must return a boolean
# value.
#
# The following variable names are recognized by the program:
# SEG:      a segment. Equivalent to WORD[I] in Segmental WFCs.
# SYLL:     a syllable. Equivalent to WORD.syllables[I] un Syllable WFCs.
#		Properties .onset, .nucleus, .coda. Only available in
#           Syllable WFCs.
# WORD:     a word. Properties .syllables contains a list of syllables.
# I:        a numerical index, iterating over (i) segments (Segmental WFCs) or
#           (ii) syllables (Syllabic WFCs)
#
# Single elements in CAPITALS are interpreted as user-defined
# segments. The features of the segment are given by the 'is' and 'is_not'
# arguments of the rule prefixed by the variable name (e.g. 'x_is=').
#
# The following functions may be used in the rules:
# matches(SEG1, SEG2): 
#		- Returns True if SEG2 (i) has all features of SEG1 and (ii) the 
#         values are identical. I.e. Underspecified SEG2s will NOT match.
# may_match(SEG1, SEG2):
#       - Returns True is SEG2 has no feature values which conflict with SEG1
#         I.e. Underspecified SEG2s WILL match.
# contains(ELEMENT, SEG):
#		- Returns True if ELEMENT contains a segment which matches() SEG.
# may_contain(ELEMENT, SEG):
#		- Returns True if ELEMENT contains a segment which 
# Only if the expression evaluates as True will a violation be noted.
# True = NOT WELL FORMED.
###############################################################################

###############################################################################

[DEFAULT]
# In the default section of this file the RANKINGS of the WFCS are given.
#
# Seg_rank ranks the segmental constraints:
seg_rank=seg1,seg2,seg3,segn
#
# Syll_rank ranks the syllabification WFCs:
# Current inviolable up to and including
syll_rank=syll100,syll112,syll102,syll109,syll110,syll111,syll101,syll103,syll106,syll104
#
# Syll_nucleus signals the nucleus rule, defining what counts as a
# nucleus.
syll_nucleus=nuc

# Weightings for the sonority parser
# ************************************
# The sonority parser calculates the goodness of the syllabification.
# Application of the rules laws gives a coefficient
# between -1 (terrible) and 0 (best), which is then multiplied by the weights
# below to pick the best parse.
#
# - onset_coeff - Returns 0 if the sonority rises continuously from the first
#                 consonant in the onset to the first segment in the nucleus.
#                 Returns -0.1 if there is a plateau in sonority or it is
#                 empty and -1 if it reverses at any point.
# - coda_coeff  - The best coda is no coda at all (0).
#				  Otherwise, the coda coefficient worsens for each additional
#                 consonant in the coda by the formula 1/2^n - 1
#                 (e.g. 3 cons = 1/2^3 - 1 = -0.825).
#                 If there is a sonority plateau, it counts an extra
#                 double consonant.
#				  If the sonority rises in the coda, the coefficient is -1.
# - nucleus_coeff - The best nucleus is non-branching (1).
#                 Otherwise, the nucleus coefficient is halved for each additional
#                 vowel in the nucleus (e.g. diphthong = .5)
#                 Coefficient is only set to -1 if the nucleus contains a 
#                 FALLING-RISING sonority pattern.
#
# Some examples:
# - no codas: high weighting for coda_coeff
# - no diphthongs: high weighting for nucleus_coeff
# - Current weights heavily penalize diphthongs; the only cases in which they
# should be formed in OGR are determined by the WFC, in particular "no ambiguous
# (i.e. glide) segments in the onset".
# - Current weights also heavily penalize bad/empty onsets, because there 
# shouldn't be any in the transcriptions!

onset_coeff=2
coda_coeff=5
nucleus_coeff=10

###############################################################################
# Each of the remaining sections in the file defines a rule.

# Nucleus rule
# ************
# The nucleus rule specifies which elements can be nuclei. It is used to
# establish well-formed candidates for syllabification before language-specific
# constraints are applied and the goodness of the syllable divisions are
# ranked according to Vennemann's constraints.

[nuc]
is=
is_not=cons

# Segmental WFCs
# **************
# Used by the optimizer to choose between multiple transcription of the 
# segmental structure, typically caused by ambiguous orthography.

[seg1] # No geminate consonants
#rule=XX
x_is=cons
x_is_not=
# Better coded rule:
rule=matches(X, WORD[I]) and matches(WORD[I], WORD[I+1])

[seg2] # A palatal consonant must not be preceded by a consonant. This helps with
# the interpretation of <ign> and <ill> digraphs, where the spelling
# interpretation rules can accidently eliminate the vowel after <qu> and <gu>
# digraphs.
# rule=XY
x_is=cons
y_is=cons,DORSAL,high,front
# Better coded rule
rule=matches(X, WORD[I]) and matches(Y, WORD[I+1])

[seg3] # Avoid reading a complex segment.
rule=SEG
preseg_is=cons

[segn] # Prefer shorter parses
# rule=XY
# Better coded rule
rule=SEG # I.e.: one violation per segment

# Syllable WFCS
# *************

# Segments not explicitly marked [+cons] are not permitted in the onset.
[syll100]
rule=may_contain(SYLL.onset, X)
x_is_not=cons

# Only [i], [u] and consonants allowed as the first segment of the coda.
# Z is [y]; simplest to exclude specifically as the only high vowel NOT allowed.
[syll101]
rule=SYLL.coda and (not (matches(X, SYLL.coda[0]) or matches(Y, SYLL.coda[0])) or matches(Z, SYLL.coda[0]))
x_is=cons
y_is=high,atr
y_is_not=cons
z_is=son,LABIAL,round,DORSAL,high,atr,voice
z_is_not=cons,nas,back

# Nuclei should be at most binary branching
[syll102]
rule=len(SYLL.nucleus) > 2

# The first element of a branching onset is an obstruant other than /s/.
[syll103]
rule=len(SYLL.onset) > 1 and (matches(X, SYLL.onset[0]) or matches(Y, SYLL.onset[0]))
x_is=son
y_is=cons,cont,strident,CORONAL,ant
y_is_not=son,nas,lat,dist

# No empty onsets
[syll104]
rule=len(SYLL.onset) == 0

# Codas should contain at most one segment
# Rank below nucleus constraints to prevent problems word-finally.
[syll105]
rule=len(SYLL.coda) > 1

# The final element of a branching onset is /r/ or /l/
[syll106]
rule=len(SYLL.onset) > 1 and not matches(X, SYLL.onset[-1])
x_is=son
x_is_not=nas

# Only /i/ and /u/ allowed as first segments of a branching nucleus
[syll109]
rule=len(SYLL.nucleus) > 1 and (not (matches(X, SYLL.nucleus[0]) or matches(Y, SYLL.nucleus[0])) or matches(Z, SYLL.nucleus[0]))
x_is=cons
y_is=high,atr
y_is_not=cons
z_is=son,LABIAL,round,DORSAL,high,atr,voice
z_is_not=cons,nas,back

# Binary branching nuclei must be /iE/
[syll110]
rule=len(SYLL.nucleus) == 2 and matches(X, SYLL.nucleus[0]) and not matches(Y, SYLL.nucleus[1]) 
x_is=son,DORSAL,high,atr,voice
x_is_not=cons,nas,low,back
y_is=son,DORSAL,voice
y_is_not=cons,nas,high,low,back

# Binary branching nuclei must be /uE/ or /uO/
[syll111]
rule=len(SYLL.nucleus) == 2 and matches(X, SYLL.nucleus[0]) and not (matches(Y, SYLL.nucleus[1]) or matches(Z, SYLL.nucleus[1]))
x_is=son,LABIAL,round,DORSAL,back,high,atr,voice
x_is_not=cons,nas,low
y_is=son,DORSAL,voice
y_is_not=cons,nas,high,low,back
z_is=son,LABIAL,round,DORSAL,back,voice
z_is_not=cons,nas

# No vowels after the first segment of a branching coda.
[syll112]
rule=len(SYLL.coda) > 1 and contains(SYLL.coda[1:], X)
x_is_not=cons